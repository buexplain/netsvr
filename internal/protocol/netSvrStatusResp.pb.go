// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: netSvrStatusResp.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// worker响应网关的状态到business
type NetSvrStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// req（request）、resp（response）时候的上下文，worker会原样回传给business
	ReCtx *ReCtx `protobuf:"bytes,1,opt,name=reCtx,proto3" json:"reCtx,omitempty"`
	// 网关中的当前客户连接数
	CustomerConnCount int32 `protobuf:"varint,2,opt,name=customerConnCount,proto3" json:"customerConnCount,omitempty"`
	// 当前等待转发到客户的数据量
	Catapult *CatapultResp `protobuf:"bytes,3,opt,name=catapult,proto3" json:"catapult,omitempty"`
	// 统计网关的各种速率值
	Metrics map[string]*MetricsStatusResp `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetSvrStatusResp) Reset() {
	*x = NetSvrStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netSvrStatusResp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetSvrStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetSvrStatusResp) ProtoMessage() {}

func (x *NetSvrStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_netSvrStatusResp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetSvrStatusResp.ProtoReflect.Descriptor instead.
func (*NetSvrStatusResp) Descriptor() ([]byte, []int) {
	return file_netSvrStatusResp_proto_rawDescGZIP(), []int{0}
}

func (x *NetSvrStatusResp) GetReCtx() *ReCtx {
	if x != nil {
		return x.ReCtx
	}
	return nil
}

func (x *NetSvrStatusResp) GetCustomerConnCount() int32 {
	if x != nil {
		return x.CustomerConnCount
	}
	return 0
}

func (x *NetSvrStatusResp) GetCatapult() *CatapultResp {
	if x != nil {
		return x.Catapult
	}
	return nil
}

func (x *NetSvrStatusResp) GetMetrics() map[string]*MetricsStatusResp {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type CatapultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前等待发送给客户数据的缓冲区的大小
	ChanCap int32 `protobuf:"varint,6,opt,name=chanCap,proto3" json:"chanCap,omitempty"`
	// 当前等待转发到客户的数据量
	ChanLen int32 `protobuf:"varint,4,opt,name=chanLen,proto3" json:"chanLen,omitempty"`
	// 当前客户于发送数据给客户的协程数量
	Consumer int32 `protobuf:"varint,5,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (x *CatapultResp) Reset() {
	*x = CatapultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netSvrStatusResp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatapultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatapultResp) ProtoMessage() {}

func (x *CatapultResp) ProtoReflect() protoreflect.Message {
	mi := &file_netSvrStatusResp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatapultResp.ProtoReflect.Descriptor instead.
func (*CatapultResp) Descriptor() ([]byte, []int) {
	return file_netSvrStatusResp_proto_rawDescGZIP(), []int{1}
}

func (x *CatapultResp) GetChanCap() int32 {
	if x != nil {
		return x.ChanCap
	}
	return 0
}

func (x *CatapultResp) GetChanLen() int32 {
	if x != nil {
		return x.ChanLen
	}
	return 0
}

func (x *CatapultResp) GetConsumer() int32 {
	if x != nil {
		return x.Consumer
	}
	return 0
}

type MetricsStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 每秒速率
	MeanRate float32 `protobuf:"fixed32,2,opt,name=meanRate,proto3" json:"meanRate,omitempty"`
	// 每秒速率的最大值
	MeanRateMax float32 `protobuf:"fixed32,3,opt,name=meanRateMax,proto3" json:"meanRateMax,omitempty"`
	// 每1分钟速率
	Rate1 float32 `protobuf:"fixed32,4,opt,name=rate1,proto3" json:"rate1,omitempty"`
	// 每1分钟速率的最大值
	Rate1Max float32 `protobuf:"fixed32,5,opt,name=rate1Max,proto3" json:"rate1Max,omitempty"`
	// 每5分钟速率
	Rate5 float32 `protobuf:"fixed32,6,opt,name=rate5,proto3" json:"rate5,omitempty"`
	// 每5分钟速率的最大值
	Rate5Max float32 `protobuf:"fixed32,7,opt,name=rate5Max,proto3" json:"rate5Max,omitempty"`
	// 每15分钟速率
	Rate15 float32 `protobuf:"fixed32,8,opt,name=rate15,proto3" json:"rate15,omitempty"`
	// 每15分钟速率的最大值
	Rate15Max float32 `protobuf:"fixed32,9,opt,name=rate15Max,proto3" json:"rate15Max,omitempty"`
}

func (x *MetricsStatusResp) Reset() {
	*x = MetricsStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netSvrStatusResp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsStatusResp) ProtoMessage() {}

func (x *MetricsStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_netSvrStatusResp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsStatusResp.ProtoReflect.Descriptor instead.
func (*MetricsStatusResp) Descriptor() ([]byte, []int) {
	return file_netSvrStatusResp_proto_rawDescGZIP(), []int{2}
}

func (x *MetricsStatusResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MetricsStatusResp) GetMeanRate() float32 {
	if x != nil {
		return x.MeanRate
	}
	return 0
}

func (x *MetricsStatusResp) GetMeanRateMax() float32 {
	if x != nil {
		return x.MeanRateMax
	}
	return 0
}

func (x *MetricsStatusResp) GetRate1() float32 {
	if x != nil {
		return x.Rate1
	}
	return 0
}

func (x *MetricsStatusResp) GetRate1Max() float32 {
	if x != nil {
		return x.Rate1Max
	}
	return 0
}

func (x *MetricsStatusResp) GetRate5() float32 {
	if x != nil {
		return x.Rate5
	}
	return 0
}

func (x *MetricsStatusResp) GetRate5Max() float32 {
	if x != nil {
		return x.Rate5Max
	}
	return 0
}

func (x *MetricsStatusResp) GetRate15() float32 {
	if x != nil {
		return x.Rate15
	}
	return 0
}

func (x *MetricsStatusResp) GetRate15Max() float32 {
	if x != nil {
		return x.Rate15Max
	}
	return 0
}

var File_netSvrStatusResp_proto protoreflect.FileDescriptor

var file_netSvrStatusResp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6e, 0x65, 0x74, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72,
	0x2e, 0x6e, 0x65, 0x74, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x1a, 0x0b, 0x72, 0x65, 0x43, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8,
	0x02, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x65, 0x43, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x72, 0x65, 0x43, 0x74,
	0x78, 0x2e, 0x52, 0x65, 0x43, 0x74, 0x78, 0x52, 0x05, 0x72, 0x65, 0x43, 0x74, 0x78, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x53, 0x76, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x63, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c, 0x74, 0x12,
	0x50, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x53, 0x76, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4e, 0x65, 0x74, 0x53, 0x76,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x1a, 0x66, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x6e, 0x65, 0x74, 0x53,
	0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x0c, 0x43, 0x61, 0x74,
	0x61, 0x70, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x43, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x43, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74,
	0x65, 0x31, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x61, 0x74,
	0x65, 0x31, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x35, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x61, 0x74, 0x65, 0x35, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72,
	0x61, 0x74, 0x65, 0x35, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x65, 0x31,
	0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x65, 0x31, 0x35, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x31, 0x35, 0x4d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x31, 0x35, 0x4d, 0x61, 0x78, 0x42, 0x1c, 0x5a,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_netSvrStatusResp_proto_rawDescOnce sync.Once
	file_netSvrStatusResp_proto_rawDescData = file_netSvrStatusResp_proto_rawDesc
)

func file_netSvrStatusResp_proto_rawDescGZIP() []byte {
	file_netSvrStatusResp_proto_rawDescOnce.Do(func() {
		file_netSvrStatusResp_proto_rawDescData = protoimpl.X.CompressGZIP(file_netSvrStatusResp_proto_rawDescData)
	})
	return file_netSvrStatusResp_proto_rawDescData
}

var file_netSvrStatusResp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_netSvrStatusResp_proto_goTypes = []interface{}{
	(*NetSvrStatusResp)(nil),  // 0: netsvr.netSvrStatusResp.NetSvrStatusResp
	(*CatapultResp)(nil),      // 1: netsvr.netSvrStatusResp.CatapultResp
	(*MetricsStatusResp)(nil), // 2: netsvr.netSvrStatusResp.MetricsStatusResp
	nil,                       // 3: netsvr.netSvrStatusResp.NetSvrStatusResp.MetricsEntry
	(*ReCtx)(nil),             // 4: netsvr.reCtx.ReCtx
}
var file_netSvrStatusResp_proto_depIdxs = []int32{
	4, // 0: netsvr.netSvrStatusResp.NetSvrStatusResp.reCtx:type_name -> netsvr.reCtx.ReCtx
	1, // 1: netsvr.netSvrStatusResp.NetSvrStatusResp.catapult:type_name -> netsvr.netSvrStatusResp.CatapultResp
	3, // 2: netsvr.netSvrStatusResp.NetSvrStatusResp.metrics:type_name -> netsvr.netSvrStatusResp.NetSvrStatusResp.MetricsEntry
	2, // 3: netsvr.netSvrStatusResp.NetSvrStatusResp.MetricsEntry.value:type_name -> netsvr.netSvrStatusResp.MetricsStatusResp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_netSvrStatusResp_proto_init() }
func file_netSvrStatusResp_proto_init() {
	if File_netSvrStatusResp_proto != nil {
		return
	}
	file_reCtx_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_netSvrStatusResp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetSvrStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netSvrStatusResp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatapultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netSvrStatusResp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netSvrStatusResp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_netSvrStatusResp_proto_goTypes,
		DependencyIndexes: file_netSvrStatusResp_proto_depIdxs,
		MessageInfos:      file_netSvrStatusResp_proto_msgTypes,
	}.Build()
	File_netSvrStatusResp_proto = out.File
	file_netSvrStatusResp_proto_rawDesc = nil
	file_netSvrStatusResp_proto_goTypes = nil
	file_netSvrStatusResp_proto_depIdxs = nil
}

//*
// Copyright 2022 buexplain@qq.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: limitReq.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新限流配置、获取网关中的限流配置的真实情况
// 这个配置不是永久生效的，网关进程重启后就以config.toml为准
// 如果配置的num是0，则更新不会生效
// 如果限流对象本身是个nilLimit，是个空壳子，则更新不会生效
// 如果nilLimit的情况下，需要限流，则必须重新配置config.toml，并重启网关
type LimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// worker会将该值赋给router.Cmd
	RouterCmd int32 `protobuf:"varint,1,opt,name=routerCmd,proto3" json:"routerCmd,omitempty"`
	// worker会原样回传给business
	CtxData []byte `protobuf:"bytes,2,opt,name=ctxData,proto3" json:"ctxData,omitempty"`
	// 要更新的限流配置，如果只想获取网关中的限流配置的真实情况，可以不传递
	Items []*LimitUpdateItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *LimitReq) Reset() {
	*x = LimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limitReq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitReq) ProtoMessage() {}

func (x *LimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_limitReq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitReq.ProtoReflect.Descriptor instead.
func (*LimitReq) Descriptor() ([]byte, []int) {
	return file_limitReq_proto_rawDescGZIP(), []int{0}
}

func (x *LimitReq) GetRouterCmd() int32 {
	if x != nil {
		return x.RouterCmd
	}
	return 0
}

func (x *LimitReq) GetCtxData() []byte {
	if x != nil {
		return x.CtxData
	}
	return nil
}

func (x *LimitReq) GetItems() []*LimitUpdateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type LimitUpdateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workerId集合
	WorkerIds []int32 `protobuf:"varint,1,rep,packed,name=workerIds,proto3" json:"workerIds,omitempty"`
	// 限流大小
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *LimitUpdateItem) Reset() {
	*x = LimitUpdateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limitReq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitUpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitUpdateItem) ProtoMessage() {}

func (x *LimitUpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_limitReq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitUpdateItem.ProtoReflect.Descriptor instead.
func (*LimitUpdateItem) Descriptor() ([]byte, []int) {
	return file_limitReq_proto_rawDescGZIP(), []int{1}
}

func (x *LimitUpdateItem) GetWorkerIds() []int32 {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

func (x *LimitUpdateItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

var File_limitReq_proto protoreflect.FileDescriptor

var file_limitReq_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x22, 0x7a, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x74,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x41, 0x0a,
	0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x42, 0x17, 0x5a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_limitReq_proto_rawDescOnce sync.Once
	file_limitReq_proto_rawDescData = file_limitReq_proto_rawDesc
)

func file_limitReq_proto_rawDescGZIP() []byte {
	file_limitReq_proto_rawDescOnce.Do(func() {
		file_limitReq_proto_rawDescData = protoimpl.X.CompressGZIP(file_limitReq_proto_rawDescData)
	})
	return file_limitReq_proto_rawDescData
}

var file_limitReq_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_limitReq_proto_goTypes = []interface{}{
	(*LimitReq)(nil),        // 0: netsvr.limitReq.LimitReq
	(*LimitUpdateItem)(nil), // 1: netsvr.limitReq.LimitUpdateItem
}
var file_limitReq_proto_depIdxs = []int32{
	1, // 0: netsvr.limitReq.LimitReq.items:type_name -> netsvr.limitReq.LimitUpdateItem
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_limitReq_proto_init() }
func file_limitReq_proto_init() {
	if File_limitReq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_limitReq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limitReq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitUpdateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_limitReq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_limitReq_proto_goTypes,
		DependencyIndexes: file_limitReq_proto_depIdxs,
		MessageInfos:      file_limitReq_proto_msgTypes,
	}.Build()
	File_limitReq_proto = out.File
	file_limitReq_proto_rawDesc = nil
	file_limitReq_proto_goTypes = nil
	file_limitReq_proto_depIdxs = nil
}

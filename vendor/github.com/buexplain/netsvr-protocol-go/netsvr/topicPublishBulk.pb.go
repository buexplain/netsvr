//*
// Copyright 2023 buexplain@qq.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: topicPublishBulk.proto

package netsvr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// business向worker请求，进行批量的主题发布信息，多份不同的消息发布到多个不同的主题
// 举个场景：直播室消息需要人工审核，自己的消息无论是否审核通过都要显示在自己的消息列表，别人的消息只显示审核通过的。
// 用户发消息到你的服务器，大概处理逻辑就是：先写入数据库，然后再包装成一个客户端需要的消息格式，发布到对应直播室的主题；然后再包装成另外一个消息格式，发布到管理员审核消息的主题，给审核人员审核。
// 这里一份消息有两个格式，分别发布到直播室主题、审核直播室消息的主题，适合用该指令进行批量发布
type TopicPublishBulk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 目标主题，有多少个topic，就有多少个data，下标是对应关系，网关的worker服务器会循环uniqId，并用其下标从data获取对应的数据
	Topics []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	// 需要发给客户的数据
	Data [][]byte `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TopicPublishBulk) Reset() {
	*x = TopicPublishBulk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topicPublishBulk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicPublishBulk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicPublishBulk) ProtoMessage() {}

func (x *TopicPublishBulk) ProtoReflect() protoreflect.Message {
	mi := &file_topicPublishBulk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicPublishBulk.ProtoReflect.Descriptor instead.
func (*TopicPublishBulk) Descriptor() ([]byte, []int) {
	return file_topicPublishBulk_proto_rawDescGZIP(), []int{0}
}

func (x *TopicPublishBulk) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *TopicPublishBulk) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_topicPublishBulk_proto protoreflect.FileDescriptor

var file_topicPublishBulk_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x75,
	0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72,
	0x2e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x75, 0x6c,
	0x6b, 0x22, 0x3e, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x27, 0x5a, 0x07, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2f, 0xca, 0x02, 0x06, 0x4e,
	0x65, 0x74, 0x73, 0x76, 0x72, 0xe2, 0x02, 0x12, 0x4e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_topicPublishBulk_proto_rawDescOnce sync.Once
	file_topicPublishBulk_proto_rawDescData = file_topicPublishBulk_proto_rawDesc
)

func file_topicPublishBulk_proto_rawDescGZIP() []byte {
	file_topicPublishBulk_proto_rawDescOnce.Do(func() {
		file_topicPublishBulk_proto_rawDescData = protoimpl.X.CompressGZIP(file_topicPublishBulk_proto_rawDescData)
	})
	return file_topicPublishBulk_proto_rawDescData
}

var file_topicPublishBulk_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_topicPublishBulk_proto_goTypes = []interface{}{
	(*TopicPublishBulk)(nil), // 0: netsvr.topicPublishBulk.TopicPublishBulk
}
var file_topicPublishBulk_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_topicPublishBulk_proto_init() }
func file_topicPublishBulk_proto_init() {
	if File_topicPublishBulk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_topicPublishBulk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicPublishBulk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_topicPublishBulk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_topicPublishBulk_proto_goTypes,
		DependencyIndexes: file_topicPublishBulk_proto_depIdxs,
		MessageInfos:      file_topicPublishBulk_proto_msgTypes,
	}.Build()
	File_topicPublishBulk_proto = out.File
	file_topicPublishBulk_proto_rawDesc = nil
	file_topicPublishBulk_proto_goTypes = nil
	file_topicPublishBulk_proto_depIdxs = nil
}

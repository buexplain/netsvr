//*
// Copyright 2023 buexplain@qq.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: router.proto

package netsvr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// worker能够处理的指令，分为三块：1、worker单向转发给business的指令，2、business单向请求worker的指令，3、business请求worker，worker再响应business的指令
type Cmd int32

const (
	// 毫无意义的占位符，目的是避免枚举从零开始，另外把指令搞大一点的目的是避免和business的指令段冲突
	Cmd_Placeholder Cmd = 0
	// --------------------------------worker单向转发给business的指令 开始--------------------------------
	Cmd_ConnOpen  Cmd = 900001001 //连接打开
	Cmd_ConnClose Cmd = 900001002 //连接关闭
	Cmd_Transfer  Cmd = 900001003 //透传客户数据
	// --------------------------------business单向请求worker的指令，worker不会响应business 开始--------------------------------
	Cmd_ConnInfoUpdate    Cmd = 900002001 //更新连接的info信息
	Cmd_ConnInfoDelete    Cmd = 900002002 //删除连接的info信息
	Cmd_Broadcast         Cmd = 900002003 //广播
	Cmd_Multicast         Cmd = 900002004 //组播
	Cmd_SingleCast        Cmd = 900002005 //单播
	Cmd_SingleCastBulk    Cmd = 900002006 //批量单播
	Cmd_TopicSubscribe    Cmd = 900002007 //订阅
	Cmd_TopicUnsubscribe  Cmd = 900002008 //取消订阅
	Cmd_TopicDelete       Cmd = 900002009 //删除主题
	Cmd_TopicPublish      Cmd = 900002010 //发布
	Cmd_ForceOffline      Cmd = 900002011 //强制关闭某个连接
	Cmd_ForceOfflineGuest Cmd = 900002012 //强制关闭某个空session值的连接
	// --------------------------------business请求worker的指令，worker会响应business 开始--------------------------------
	Cmd_Register         Cmd = 900003001 //注册business到worker，注册后，business会收到worker转发的客户信息
	Cmd_Unregister       Cmd = 900003002 //取消注册，取消后不会再收到客户信息
	Cmd_CheckOnline      Cmd = 900003003 //判断uniqId是否在网关中
	Cmd_UniqIdList       Cmd = 900003004 //获取网关中全部的uniqId
	Cmd_UniqIdCount      Cmd = 900003005 //获取网关中uniqId的数量
	Cmd_TopicCount       Cmd = 900003006 //获取网关中的主题数量
	Cmd_TopicList        Cmd = 900003007 //获取网关中的主题
	Cmd_TopicUniqIdList  Cmd = 900003008 //获取网关中某个主题包含的uniqId
	Cmd_TopicUniqIdCount Cmd = 900003009 //获取网关中的主题包含的连接数
	Cmd_ConnInfo         Cmd = 900003010 //获取连接的信息
	Cmd_Metrics          Cmd = 900003011 //获取网关统计的服务状态
	Cmd_Limit            Cmd = 900003012 //更新限流配置、获取网关中的限流配置的真实情况
)

// Enum value maps for Cmd.
var (
	Cmd_name = map[int32]string{
		0:         "Placeholder",
		900001001: "ConnOpen",
		900001002: "ConnClose",
		900001003: "Transfer",
		900002001: "ConnInfoUpdate",
		900002002: "ConnInfoDelete",
		900002003: "Broadcast",
		900002004: "Multicast",
		900002005: "SingleCast",
		900002006: "SingleCastBulk",
		900002007: "TopicSubscribe",
		900002008: "TopicUnsubscribe",
		900002009: "TopicDelete",
		900002010: "TopicPublish",
		900002011: "ForceOffline",
		900002012: "ForceOfflineGuest",
		900003001: "Register",
		900003002: "Unregister",
		900003003: "CheckOnline",
		900003004: "UniqIdList",
		900003005: "UniqIdCount",
		900003006: "TopicCount",
		900003007: "TopicList",
		900003008: "TopicUniqIdList",
		900003009: "TopicUniqIdCount",
		900003010: "ConnInfo",
		900003011: "Metrics",
		900003012: "Limit",
	}
	Cmd_value = map[string]int32{
		"Placeholder":       0,
		"ConnOpen":          900001001,
		"ConnClose":         900001002,
		"Transfer":          900001003,
		"ConnInfoUpdate":    900002001,
		"ConnInfoDelete":    900002002,
		"Broadcast":         900002003,
		"Multicast":         900002004,
		"SingleCast":        900002005,
		"SingleCastBulk":    900002006,
		"TopicSubscribe":    900002007,
		"TopicUnsubscribe":  900002008,
		"TopicDelete":       900002009,
		"TopicPublish":      900002010,
		"ForceOffline":      900002011,
		"ForceOfflineGuest": 900002012,
		"Register":          900003001,
		"Unregister":        900003002,
		"CheckOnline":       900003003,
		"UniqIdList":        900003004,
		"UniqIdCount":       900003005,
		"TopicCount":        900003006,
		"TopicList":         900003007,
		"TopicUniqIdList":   900003008,
		"TopicUniqIdCount":  900003009,
		"ConnInfo":          900003010,
		"Metrics":           900003011,
		"Limit":             900003012,
	}
)

func (x Cmd) Enum() *Cmd {
	p := new(Cmd)
	*p = x
	return p
}

func (x Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[0].Descriptor()
}

func (Cmd) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[0]
}

func (x Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cmd.Descriptor instead.
func (Cmd) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

// 路由
type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 命令
	Cmd Cmd `protobuf:"varint,1,opt,name=cmd,proto3,enum=netsvr.router.Cmd" json:"cmd,omitempty"`
	// 命令携带的数据
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

func (x *Router) GetCmd() Cmd {
	if x != nil {
		return x.Cmd
	}
	return Cmd_Placeholder
}

func (x *Router) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_router_proto protoreflect.FileDescriptor

var file_router_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x42, 0x0a,
	0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x2a, 0xcd, 0x04, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0xe9, 0xd9, 0x93, 0xad, 0x03, 0x12, 0x11, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0xea, 0xd9, 0x93, 0xad, 0x03, 0x12,
	0x10, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0xeb, 0xd9, 0x93, 0xad,
	0x03, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0xd1, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xd2, 0xe1, 0x93, 0xad,
	0x03, 0x12, 0x11, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0xd3,
	0xe1, 0x93, 0xad, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x10, 0xd4, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x12, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x61, 0x73, 0x74, 0x10, 0xd5, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x16, 0x0a, 0x0e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x10, 0xd6, 0xe1,
	0x93, 0xad, 0x03, 0x12, 0x16, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0xd7, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x18, 0x0a, 0x10, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10,
	0xd8, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x13, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0xd9, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x14, 0x0a, 0x0c, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x10, 0xda, 0xe1, 0x93, 0xad, 0x03,
	0x12, 0x14, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0xdb, 0xe1, 0x93, 0xad, 0x03, 0x12, 0x19, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x10, 0xdc, 0xe1, 0x93, 0xad,
	0x03, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0xb9, 0xe9,
	0x93, 0xad, 0x03, 0x12, 0x12, 0x0a, 0x0a, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x10, 0xba, 0xe9, 0x93, 0xad, 0x03, 0x12, 0x13, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xbb, 0xe9, 0x93, 0xad, 0x03, 0x12, 0x12, 0x0a, 0x0a,
	0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xbc, 0xe9, 0x93, 0xad, 0x03,
	0x12, 0x13, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0xbd, 0xe9, 0x93, 0xad, 0x03, 0x12, 0x12, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0xbe, 0xe9, 0x93, 0xad, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xbf, 0xe9, 0x93, 0xad, 0x03, 0x12, 0x17, 0x0a, 0x0f,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0xc0, 0xe9, 0x93, 0xad, 0x03, 0x12, 0x18, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xc1, 0xe9, 0x93, 0xad, 0x03, 0x12,
	0x10, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xc2, 0xe9, 0x93, 0xad,
	0x03, 0x12, 0x0f, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0xc3, 0xe9, 0x93,
	0xad, 0x03, 0x12, 0x0d, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xc4, 0xe9, 0x93, 0xad,
	0x03, 0x42, 0x27, 0x5a, 0x07, 0x6e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x2f, 0xca, 0x02, 0x06, 0x4e,
	0x65, 0x74, 0x73, 0x76, 0x72, 0xe2, 0x02, 0x12, 0x4e, 0x65, 0x74, 0x73, 0x76, 0x72, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_router_proto_rawDescOnce sync.Once
	file_router_proto_rawDescData = file_router_proto_rawDesc
)

func file_router_proto_rawDescGZIP() []byte {
	file_router_proto_rawDescOnce.Do(func() {
		file_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_proto_rawDescData)
	})
	return file_router_proto_rawDescData
}

var file_router_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_router_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_router_proto_goTypes = []interface{}{
	(Cmd)(0),       // 0: netsvr.router.Cmd
	(*Router)(nil), // 1: netsvr.router.Router
}
var file_router_proto_depIdxs = []int32{
	0, // 0: netsvr.router.Router.cmd:type_name -> netsvr.router.Cmd
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_router_proto_init() }
func file_router_proto_init() {
	if File_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_router_proto_goTypes,
		DependencyIndexes: file_router_proto_depIdxs,
		EnumInfos:         file_router_proto_enumTypes,
		MessageInfos:      file_router_proto_msgTypes,
	}.Build()
	File_router_proto = out.File
	file_router_proto_rawDesc = nil
	file_router_proto_goTypes = nil
	file_router_proto_depIdxs = nil
}
